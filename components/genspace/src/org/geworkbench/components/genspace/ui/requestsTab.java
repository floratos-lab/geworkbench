package org.geworkbench.components.genspace.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListCellRenderer;
import javax.swing.SwingWorker;

import org.geworkbench.components.genspace.GenSpace;
import org.geworkbench.components.genspace.GenSpaceServerFactory;
import org.geworkbench.components.genspace.server.stubs.Network;
import org.geworkbench.components.genspace.server.stubs.User;
import org.geworkbench.components.genspace.server.stubs.UserNetwork;
import org.geworkbench.components.genspace.server.wrapper.UserWrapper;
import org.geworkbench.components.genspace.ui.chat.RosterFrame;

/**
 * Created by IntelliJ IDEA. User: jon Date: Aug 28, 2010 Time: 12:56:05 PM To
 * change this template use File | Settings | File Templates.
 */
public class requestsTab extends SocialTab {
	private JList friendsList;
	private JList networksList;
	private JButton acceptFriendButton;
	private JButton rejectFriendButton;
	private JButton acceptButton;
	private JButton rejectButton;

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
		initListeners();

	}
	
	@Override
	public void updateFormFields() {
		if (GenSpaceServerFactory.isLoggedIn()) {

			SwingWorker<List<UserNetwork>, Void> worker = new SwingWorker<List<UserNetwork>, Void>() {

				@Override
				protected List<UserNetwork> doInBackground()
						throws Exception {
					LinkedList<UserNetwork> ret = new LinkedList<UserNetwork>();
					for (UserNetwork t : GenSpaceServerFactory.getNetworkOps().getMyNetworks()) {
						Network nt = t.getNetwork();
						if ((new UserWrapper(nt.getOwner())).equals(GenSpaceServerFactory.getWrappedUser()))
							ret.addAll((GenSpaceServerFactory.getNetworkOps().getNetworkRequests(nt.getId())));
					}
					return ret;
				}

				@Override
				protected void done() {
					List<UserNetwork> requests = null;
					try {
						requests = get();
					} catch (InterruptedException e) {
						GenSpace.logger.warn("Error talking to server",e);
					} catch (ExecutionException e) {
						GenSpaceServerFactory.clearCache();
						updateFormFields();
						return;
					}
					DefaultListModel model = new DefaultListModel();
					if(requests != null)
					for (UserNetwork t : requests) {
						model.addElement(t);
					}
					networksList.setModel(model);
				}

			};
			worker.execute();

			SwingWorker<List<User>, Void> worker2 = new SwingWorker<List<User>, Void>() {

				@Override
				protected List<User> doInBackground()
						throws Exception {
					return GenSpaceServerFactory.getFriendOps().getFriendRequests();
				}

				@Override
				protected void done() {
					List<User> requests = null;
					try {
						requests = get();
					} catch (InterruptedException e) {
						e.printStackTrace();
					} catch (ExecutionException e) {
						GenSpaceServerFactory.clearCache();
						updateFormFields();
						return;
					}
					DefaultListModel model = new DefaultListModel();
						for (User t : requests) {
							model.addElement(new UserWrapper(t));
						}
					friendsList.setModel(model);
				}

			};
			worker2.execute();

		}
	}

	private void initListeners() {
		friendsList.setCellRenderer(new ListCellRenderer() {

			@Override
			public Component getListCellRendererComponent(JList list,
					Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				UserWrapper n = (UserWrapper) value;
				JLabel ret = (JLabel) new DefaultListCellRenderer()
						.getListCellRendererComponent(list, value, index,
								isSelected, cellHasFocus);
				ret.setText(n.getFullNameWUsername());
				
				if (isSelected)
					ret.setBackground(new Color(205, 220, 243));
				return ret;
			}
		});
		networksList.setCellRenderer(new ListCellRenderer() {

			@Override
			public Component getListCellRendererComponent(JList list,
					Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				
				JLabel ret = (JLabel) new DefaultListCellRenderer()
						.getListCellRendererComponent(list, value, index,
								isSelected, cellHasFocus);
				UserNetwork n = (UserNetwork) value;
				ret.setText(n.getNetwork().getName() + ": " + ((new UserWrapper(n.getUser()))).getFullNameWUsername());

				if (isSelected)
					ret.setBackground(new Color(205, 220, 243));
				return ret;
			}
		});
		acceptButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (networksList.getSelectedValue() != null) {
					try {
						GenSpaceServerFactory.getNetworkOps().acceptNetworkRequest(((UserNetwork) networksList.getSelectedValue()).getId());
						GenSpaceLogin.chatHandler.rf.refresh();
					} catch (Exception e1) {
						GenSpaceServerFactory.handleExecutionException(e1);
					}
					SocialNetworksHome.getInstance().updateFormFields();
				}
			}
		});
		rejectButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (networksList.getSelectedValue() != null) {
					try {
						GenSpaceServerFactory.getNetworkOps().rejectNetworkRequest(((UserNetwork) networksList.getSelectedValue()).getId());
					} catch (Exception e1) {
						GenSpaceServerFactory.handleExecutionException(e1);
					}
					SocialNetworksHome.getInstance().updateFormFields();
				}
			}
		});
		acceptFriendButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(friendsList.getSelectedValue() != null)
				{
					try {
						GenSpaceServerFactory.getFriendOps().addFriend(((UserWrapper) friendsList.getSelectedValue()).getId());
						RosterFrame.removedCache.remove(((UserWrapper) friendsList.getSelectedValue()).getUsername()+"@genspace");
						GenSpaceLogin.chatHandler.rf.refresh();
						
					} catch (Exception e1) {
						GenSpaceServerFactory.handleExecutionException(e1);
					}
					SocialNetworksHome.getInstance().updateFormFields();
				}
			}
		});
		rejectFriendButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(friendsList.getSelectedValue() != null)
				{
					try {
						GenSpaceServerFactory.getFriendOps().rejectFriend(((UserWrapper) friendsList.getSelectedValue()).getId());
					} catch (Exception e1) {
						GenSpaceServerFactory.handleExecutionException(e1);
					}
					SocialNetworksHome.getInstance().updateFormFields();
				}
			}
		});

	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
	 * edit this method OR call it in your code!
	 * 
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3,
				5, new Insets(0, 0, 0, 0), -1, -1));
		final JLabel label1 = new JLabel();
		label1.setText("Friends");
		panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0,
				0, 1, 1,
				com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
				com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Network");
		panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0,
				3, 1, 1,
				com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
				com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		acceptFriendButton = new JButton();
		acceptFriendButton.setText("Accept Friend");
		panel1.add(
				acceptFriendButton,
				new com.intellij.uiDesigner.core.GridConstraints(
						2,
						0,
						1,
						1,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
						null, null, null, 0, false));
		rejectFriendButton = new JButton();
		rejectFriendButton.setText("Reject Friend");
		panel1.add(
				rejectFriendButton,
				new com.intellij.uiDesigner.core.GridConstraints(
						2,
						1,
						1,
						1,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
						null, null, null, 0, false));
		acceptButton = new JButton();
		acceptButton.setText("Accept");
		panel1.add(
				acceptButton,
				new com.intellij.uiDesigner.core.GridConstraints(
						2,
						3,
						1,
						1,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
						null, null, null, 0, false));
		rejectButton = new JButton();
		rejectButton.setText("Reject");
		panel1.add(
				rejectButton,
				new com.intellij.uiDesigner.core.GridConstraints(
						2,
						4,
						1,
						1,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
						null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
		panel1.add(
				spacer1,
				new com.intellij.uiDesigner.core.GridConstraints(
						1,
						2,
						1,
						1,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
						1, null, null, null, 0, false));
		final JScrollPane scrollPane1 = new JScrollPane();
		panel1.add(
				scrollPane1,
				new com.intellij.uiDesigner.core.GridConstraints(
						1,
						0,
						1,
						2,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
						null, null, null, 0, false));
		friendsList = new JList();
		scrollPane1.setViewportView(friendsList);
		final JScrollPane scrollPane2 = new JScrollPane();
		panel1.add(
				scrollPane2,
				new com.intellij.uiDesigner.core.GridConstraints(
						1,
						3,
						1,
						2,
						com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
						com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
						com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
								| com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
						null, null, null, 0, false));
		networksList = new JList();
		scrollPane2.setViewportView(networksList);
	}

	@Override
	public String getName() {
		return "Pending Requests";
	}
}
